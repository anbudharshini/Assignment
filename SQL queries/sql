-- task 1
create database HMBank;
use HMBank;
create table customers(
customer_id int primary key,
first_name varchar(50),
last_name varchar(50),
DOB date,
email varchar(50) unique,
phone_number varchar(15),
address varchar(100)
);

create table accounts(
account_id int primary key,
customer_id int,
account_type enum('savings','current','zero_balance'),
balance decimal(10,2),
foreign key (customer_id) references customers(customer_id)
);

create table transactions(
transaction_id int primary key,
account_id int references accounts(account_id),
transaction_type enum('deposit','withdrawal','transfer'),
amount decimal(10,2),
transaction_date date,
foreign key (account_id) references accounts(account_id)
);

ALTER TABLE accounts DROP FOREIGN KEY accounts_ibfk_1;
ALTER TABLE customers DROP FOREIGN KEY customers_ibfk_1;
ALTER TABLE transactions DROP FOREIGN KEY transactions_ibfk_1;

-- Start customer_id from 1001
ALTER TABLE customers AUTO_INCREMENT = 1;
ALTER TABLE customers MODIFY COLUMN customer_id INT NOT NULL AUTO_INCREMENT;

-- Start account_id from 5001
ALTER TABLE accounts AUTO_INCREMENT = 100;

-- Start transaction_id from 10001
ALTER TABLE transactions AUTO_INCREMENT = 1000;
SHOW CREATE TABLE customers;

INSERT INTO customers (first_name, last_name, DOB, email, phone_number, address)
VALUES ('Anbu', 'Dharshini', '2000-05-15', 'anbu.d@example.com', '9876543210', 'Chennai, India');
INSERT INTO accounts (customer_id, account_type, balance)
VALUES (1001, 'savings', 15000.00);
INSERT INTO transactions (account_id, transaction_type, amount, transaction_date)
VALUES (5001, 'deposit', 15000.00, CURDATE());
ALTER TABLE accounts MODIFY COLUMN account_id INT NOT NULL AUTO_INCREMENT;
ALTER TABLE transactions MODIFY COLUMN transaction_id INT NOT NULL AUTO_INCREMENT;

select * from customers;
select * from transactions;
select * from accounts;


insert into customers (customer_id, first_name, last_name, DOB, email, phone_number, address) values
('Arun', 'Kumar', '1990-05-15', 'arun.kumar@example.com', '9876543210', 'Chennai, TN'),
('Divya', 'Ramesh', '1992-11-03', 'divya.ramesh@example.com', '9823456789', 'Coimbatore, TN'),
('Rahul', 'Sharma', '1988-07-20', 'rahul.sharma@example.com', '9901234567', 'Bangalore, KA'),
('Sneha', 'Patel', '1995-03-25', 'sneha.patel@example.com', '9988776655', 'Ahmedabad, GJ'),
('Vijay', 'Rao', '1991-09-10', 'vijay.rao@example.com', '9012345678', 'Hyderabad, TS'),
('Priya', 'Menon', '1993-01-18', 'priya.menon@example.com', '9123456780', 'Kochi, KL'),
('Suresh', 'Naik', '1987-06-30', 'suresh.naik@example.com', '9234567890', 'Mumbai, MH'),
('Aishwarya', 'Joshi', '1996-12-14', 'aishwarya.joshi@example.com', '9345678901', 'Pune, MH'),
('Ravi', 'Teja', '1994-08-22', 'ravi.teja@example.com', '9456789012', 'Vijayawada, AP'),
('Meera', 'Iyer', '1990-04-08', 'meera.iyer@example.com', '9567890123', 'Madurai, TN');

select * from customers;

insert into accounts(account_id, customer_id, account_type, balance) values
(101, 1, 'savings', 15000.00),
(102, 2, 'current', 5000.50),
(103, 3, 'savings', 25000.00),
(104, 4, 'zero_balance', 0.00),
(105, 5, 'current', 12000.75),
(106, 6, 'savings', 18000.00),
(107, 7, 'zero_balance', 0.00),
(108, 8, 'current', 9500.25),
(109, 9, 'savings', 30000.00),
(110, 10, 'savings', 8000.00);
 insert into accounts(account_id, customer_id, account_type, balance)
values (111, 1, 'current', 20000.00);

select * from accounts;
insert into transactions(transaction_id, account_id, transaction_type, amount, transaction_date) values
(1001, 101, 'deposit', 5000.00, '2025-06-01'),
(1002, 102, 'withdrawal', 2000.50, '2025-06-02'),
(1003, 103, 'deposit', 8000.00, '2025-06-03'),
(1004, 104, 'transfer', 1500.00, '2025-06-04'),
(1005, 105, 'deposit', 6000.25, '2025-06-05'),
(1006, 106, 'withdrawal', 3000.00, '2025-06-06'),
(1007, 107, 'deposit', 1000.00, '2025-06-07'),
(1008, 108, 'transfer', 2500.75, '2025-06-08'),
(1009, 109, 'withdrawal', 4000.00, '2025-06-09'),
(1010, 110, 'deposit', 2000.00, '2025-06-10');

select * from transactions;

-- 1.Write a SQL query to retrieve the name, account type and email of all customers.
select concat(c.first_name, ' ',c.last_name) as full_name,
a.account_type,c.email from customers c,accounts a
where c.customer_id=a.customer_id;

-- 2.Write a SQL query to list all transaction corresponding customer.
select a.account_id, t.transaction_id,customer_id
from transactions t,accounts a where a.account_id=t.account_id;

-- 3.Write a SQL query to increase the balance of a specific account by a certain amount.
update accounts set balance=balance+500
where account_id=101;

-- 4.Write a SQL query to Combine first and last names of customers as a full_name.
select concat(first_name, ' ', last_name) as fullname from customers;

-- 5.Write a SQL query to remove accounts with a balance of zero where the account type is savings.
delete from accounts where balance = 0 and account_type='savings';

-- 6.Write a SQL query to Find customers living in a specific city.
select concat(first_name,' ',last_name),customer_id as full_name from customers where address like '%Chennai%';

-- 7.Write a SQL query to Get the account balance for a specific account.
select account_id, balance from accounts where account_id=103;

-- 8.Write a SQL query to List all current accounts with a balance greater than $1,000.
select * from accounts where account_type='current' and balance>1000;

-- 9.Write a SQL query to Retrieve all transactions for a specific account.
select * from transactions where transaction_id=1001;

-- 10.Write a SQL query to Calculate the interest accrued on savings accounts based on a given interest rate.
select account_id, balance, balance*0.04 as interest from accounts
where account_type='savings';

-- 11.Write a SQL query to Identify accounts where the balance is less than a specified overdraft limit.
select * from accounts where balance < 10000;

-- 12.Write a SQL query to Find customers not living in a specific city.
select * from customers where address not like '%mumbai%';

-- task 3
-- 1.Write a SQL query to Find the average account balance for all customers.
select avg(balance) as avgbalance from accounts;

-- 2.Write a SQL query to Retrieve the top 5 highest account balances.
select * from accounts order by balance desc
limit 5;

-- 3.Write a SQL query to Calculate Total Deposits for All Customers in specific date.
select transaction_date, sum(amount) as total_deposit from transactions
where transaction_type='deposit'
group by transaction_date;

-- 4.Write a SQL query to Find the Oldest and Newest Customers.
select min(DOB) as oldestcustomer,max(DOB) as newestcustomer from customers;

-- 5.Write a SQL query to Retrieve transaction details along with the account type.
select t.*,a.account_type from transactions t join accounts a
on t.account_id=a.account_id;

-- 6.Write a SQL query to Get a list of customers along with their account details.
select c.customer_id,concat(first_name,' ',last_name) as full_name,a.* from customers c
join accounts a on c.customer_id=c.customer_id;

-- 7.Write a SQL query to Retrieve transaction details along with customer information for a specific account.
select c.customer_id,concat(first_name,' ',last_name) as full_name,t.* from transactions t
join accounts a on t.account_id=a.account_id
join customers c on a.customer_id=c.customer_id
where t.account_id=107;

-- 8.Write a SQL query to Identify customers who have more than one account.
select customer_id, count(*) as no_of_accounts from accounts
group by customer_id
having count(*)>1;

-- 10. Write a SQL query to Calculate the average daily balance for each account over a specified period.
select account_id, avg(amount) as avg_daily_balance from transactions
group by account_id;

-- 11. Calculate the total balance for each account type.
select sum(balance),account_type as total_balance from accounts
group by account_type;

-- 12. Identify accounts with the highest number of transactions order by descending order.
select c.customer_id, c.first_name, count(*) as transaction_count
from Transactions t
join Accounts a on t.account_id = a.account_id
join Customers c on a.customer_id = c.customer_id
group by c.customer_id
order by transaction_count desc
limit 1;

-- 13. List customers with high aggregate account balances, along with their account types.
select concat(first_name,' ',last_name) as full_name,a.account_type, a.balance
from customers c join accounts a on c.customer_id=a.customer_id;


-- 14. Identify and list duplicate transactions based on transaction amount, date, and account.
 select amount,transaction_date,transaction_id,count(*) as transactions_count from transactions
group by amount,transaction_date,transaction_id
having count(*)>1;

-- task 4

-- 1.Retrieve the customer(s) with the highest account balance.
select * from customers
where customer_id in(select customer_id from accounts
where balance =(select max(balance) from accounts));

-- 2.calculate the average account balance for customers who have more than one account
select avg(balance), customer_id from accounts
where customer_id in(select customer_id from accounts
group by customer_id
having count(account_id)>1)
group by customer_id;

-- 3.retrieve accounts with transactions whose amounts exceed the average transaction amount
select account_id,amount,transaction_id from transactions
where amount>(select avg(amount) from transactions);

-- 4.identify customers who have no recorded transactions
select * from customers where customer_id not in
(select customer_id from accounts where account_id in
(select account_id from transactions));

-- 5.calculate the total balance of accounts with no recorded transactions
select sum(balance) from accounts
where account_id not in(select account_id from transactions);

-- 6.retrieve transactions for accounts with the lowest balance
select * from transactions where account_id in(
select account_id from accounts
where balance=(select min(balance) from accounts));

-- 7.identify customers who have accounts of multiple types

select customer_id
from accounts
group by customer_id
having count(account_type) > 1;


-- 8. calculate the percentage of each account type out of the total number of accounts
select account_type,count(*)*100.0/
(select count(*) from accounts)as percentage from accounts
group by account_type;

-- 9.retrieve all transactions for a customer with a given customer_id

select * from transactions where account_id in
(select account_id from accounts where customer_id=1);

-- 10. calculate the total balance for each account type, including a subquery within the select clause
select account_type,sum(balance) as total_balance,
(select sum(balance) from accounts) as overall_total from accounts
group by account_type;





